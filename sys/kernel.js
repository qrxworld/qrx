// system/kernel.js

// The main libraries are now loaded globally from index.html.
import http from 'https://unpkg.com/isomorphic-git/http/web/index.js';
// The new AST parser, which uses nearley.js
import parse from './parser.js';

/**
 * Kernel is the main class for the web terminal.
 * It now functions as an interpreter for the Abstract Syntax Tree (AST)
 * generated by the parser.
 */
export default class Kernel {
    constructor(options = {}) {
        // --- Default Configuration ---
        const defaults = {
            container: document.getElementById('terminal'),
            welcomeMessage: 'Welcome to the QRx Kernel.\r\n',
            // Corrected relative paths to go up one directory from /system/ to find /sys/
            repo: {
                commands: '../sys/cmd/index.js',
                inputHandler: '../sys/handlers/input.js',
                keyHandlers: '../sys/handlers/keys/index.js'
            },
            gitConfig: { dir: '/', corsProxy: 'https://cors.isomorphic-git.org' }
        };
        // Deep merge of defaults and options
        this.config = { 
            ...defaults, 
            ...options, 
            repo: { ...defaults.repo, ...(options.repo || {}) },
            gitConfig: { ...defaults.gitConfig, ...(options.gitConfig || {}) },
        };

        // --- Core Components & State ---
        this.fs = new window.LightningFS('main_qrxworld_qrx'); // Namespaced filesystem
        this.pfs = this.fs.promises;
        this.git = window.isomorphicGit; 
        this.http = http;
        this.term = new window.Terminal({
            cursorBlink: true, fontSize: 14, fontFamily: 'monospace',
            theme: { background: '#1e1e1e', foreground: '#d4d4d4', cursor: '#d4d4d4' },
            allowTransparency: true,
        });

        // Bind core I/O methods to ensure 'this' is always correct.
        this.write = this.write.bind(this);
        this.writeln = this.writeln.bind(this);
        
        this.term.open(this.config.container);
        this.term.focus();

        this.cwd = '/'; this.env = {};
        this.history = []; this.historyIndex = -1;
        this.commandBuffer = ''; this.commandInProgress = false;
        
        this.commands = {}; this.inputHandler = null;
        this.currentProcess = null;

        // --- Initialization ---
        this.init().catch(err => {
            console.error("Initialization failed:", err);
            this.writeln(`\x1B[1;31mFATAL: Initialization failed. Check console for details.\x1B[0m`);
            this.commandInProgress = true;
        });
    }

    /**
     * Initializes the filesystem and loads all modules.
     */
    async init() {
        await this.pfs.mkdir('/sys/cmd').catch(e => {}); // Ensure user command dir exists
        await this.loadModules();
        this.term.onKey((keyEvent) => {
            if (this.inputHandler) {
                this.inputHandler.handle(this, keyEvent);
            }
        });
        this.term.write(this.config.welcomeMessage);
        this.prompt();
    }

    /**
     * Loads all necessary modules.
     */
    async loadModules() {
        this.writeln('Loading modules...');
        await this.loadInputHandler(this.config.repo.inputHandler);
        await this.loadKeyHandlers(this.config.repo.keyHandlers);
        await this.loadCommandManifest(this.config.repo.commands);
        this.writeln('All modules loaded.');
    }
    
    async loadInputHandler(url) {
        try {
            const { default: InputHandler } = await import(url);
            this.inputHandler = new InputHandler();
        } catch (error) { this.writeln(`\x1B[1;31mFATAL: Could not load Input Handler from ${url}\x1B[0m`); console.error(error); }
    }
    
    async loadKeyHandlers(url) {
        if (!this.inputHandler) return;
        try {
            const { default: keyManifest } = await import(url);
            for (const keyName in keyManifest) {
                const path = keyManifest[keyName];
                const handlerModule = await import(path);
                this.inputHandler.register(keyName, handlerModule.default);
            }
        } catch (error) { this.writeln(`\x1B[1;31mFATAL: Could not load Key Handlers from ${url}\x1B[0m`); console.error(error); }
    }

    async loadCommandManifest(url) {
        try {
            const { default: commandRegistry } = await import(url);
            this.commands = commandRegistry;
        } catch (error) { this.writeln(`\x1B[1;31mFATAL: Could not load Command Manifest from ${url}\x1B[0m`); console.error(error); }
    }

    // --- Terminal I/O Methods ---
    prompt() {
        this.commandBuffer = '';
        this.commandInProgress = false;
        this.term.focus();
        this.term.write(`\r\n\x1B[1;32muser@host\x1B[0m:\x1B[1;34m${this.cwd}\x1B[0m$ `);
    }

    write(data) { this.term.write(String(data).replace(/\n/g, '\r\n')); }
    writeln(data) { this.write(data + '\r\n'); }
    
    // --- Process Cancellation ---
    cancelCurrentProcess() {
        if (this.currentProcess?.cancel) {
            this.currentProcess.cancel();
        } else {
            this.writeln('^C');
            this.prompt();
        }
    }

    // --- AST-based Command Execution ---
    async runCommand(line) {
        this.commandInProgress = true;
        const ast = parse(line);

        try {
            // The top level of the AST is an array of commands/groups to run sequentially.
            for (const node of ast) {
                const output = await this.executeNode(node);
                // Only print output to terminal if it's not redirected and has content.
                if (output && !node.redirection) {
                    this.write(output);
                }
            }
        } catch (error) {
            this.writeln(`\x1B[1;31mError: ${error.message}\x1B[0m`);
            console.error(error);
        } finally {
            this.commandInProgress = false;
            this.prompt();
        }
    }

    /**
     * Main AST interpreter. It ALWAYS returns the stdout of the node as a string.
     * @param {object} node - A node from the AST generated by parser.js.
     * @param {string|null} stdin - Standard input from a previous command in a pipeline.
     * @returns {Promise<string>} The standard output of the executed node.
     */
    async executeNode(node, stdin = null) {
        if (!node) return '';
        let stdout = '';

        // This switch handles the different types of nodes the parser can produce.
        switch (node.type) {
            case 'error':
                return `-qrx: parse error: ${node.message}\n`;
            
            case 'pipeline':
                const leftOutput = await this.executeNode(node.from, stdin);
                stdout = await this.executeNode(node.to, leftOutput);
                break;
            
            case 'group':
                const groupOutputBuffer = [];
                for (const cmdNode of node.commands) {
                    const subOutput = await this.executeNode(cmdNode, stdin);
                    groupOutputBuffer.push(subOutput);
                }
                stdout = groupOutputBuffer.join('');
                break;

            case 'command':
                const buffer = [];
                const originalWrite = this.write;
                const originalWriteln = this.writeln;
                this.write = (data) => buffer.push(data);
                this.writeln = (data) => buffer.push(data + '\n');
                try {
                    this.currentProcess = this.executeSingleCommand(node, stdin);
                    await this.currentProcess;
                } finally {
                    this.currentProcess = null;
                    this.write = originalWrite;
                    this.writeln = originalWriteln;
                }
                stdout = buffer.join('');
                break;
        }

        if (node.redirection) {
            const { mode, file } = node.redirection;
            const path = this.resolvePath(file);
            if (mode === 'append') {
                const existing = await this.pfs.readFile(path, 'utf8').catch(() => '');
                await this.pfs.writeFile(path, existing + stdout);
            } else {
                await this.pfs.writeFile(path, stdout);
            }
            return ''; // Redirection consumes output.
        }
        return stdout;
    }

    /**
     * The lowest-level execution function for a single command.
     * @param {object} commandObject - A command node from the AST.
     * @param {string|null} stdin - Piped input.
     */
    async executeSingleCommand({ name, args }, stdin = null) {
        if (!name) {
            if (stdin !== null) this.write(stdin);
            return;
        }
        
        const assignMatch = name.match(/^([a-zA-Z_][a-zA-Z0-9_]*)=(.+)/s);
        if (assignMatch && args.length === 0) {
            this.env[assignMatch[1]] = assignMatch[2].replace(/^['"]|['"]$/g, '');
            return;
        }

        let commandModule;
        const jsPath = `/sys/cmd/${name.replace(/\.js$/, '')}.js`;
        try {
            const code = await this.pfs.readFile(jsPath, 'utf8');
            const blob = new Blob([code], { type: 'text/javascript' });
            const url = URL.createObjectURL(blob);
            commandModule = await import(url);
            URL.revokeObjectURL(url);
        } catch (e) { /* fallback */ }
        
        if (commandModule?.default?.run) {
            return commandModule.default.run(this, args, stdin);
        }

        let scriptContent;
        try {
            scriptContent = await this.pfs.readFile(this.resolvePath(name), 'utf8');
        } catch (e) {
            try {
                scriptContent = await this.pfs.readFile(`/sys/cmd/${name}`, 'utf8');
            } catch (e2) { /* fallback */ }
        }

        if (scriptContent) {
            const ast = parse(scriptContent);
            for (const node of ast) {
                const output = await this.executeNode(node);
                if (output) this.write(output);
            }
            return;
        }

        const builtin = this.commands[name];
        if (builtin?.run) return builtin.run(this, args, stdin);
        
        this.handleBuiltins(name, args);
    }
    
    handleBuiltins(name, args) {
        switch (name) {
            case 'help':
                const cmds = Object.keys(this.commands).sort().join(', ');
                this.writeln(`Builtins: help, clear. Commands: ${cmds}`);
                break;
            case 'clear': this.term.clear(); break;
            case '': break;
            default: this.writeln(`command not found: ${name}`);
        }
    }

    resolvePath(path) {
        if (!path || path === '.') return this.cwd;
        if (path.startsWith('/')) return path.replace(/\/+/g, '/');
        return `${this.cwd === '/' ? '' : this.cwd}/${path}`;
    }
}

